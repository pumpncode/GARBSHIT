[manifest]
version = "2.0"
dump_lua = true
priority = 27

# Jump Cards
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''local skipped_rank = false'''
position = "after"
payload = '''
    local jumps = 0
    for i = 1, hand do
      if SMODS.has_enhancement(hand[i], 'm_garb_jump') then jumps = jumps + 1 end
    end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''elseif can_skip and not skipped_rank and j ~= 14 then'''
position = "before"
payload = '''
elseif jumps > 0 then
    print(jumps)
    jumps = jumps - 1
'''
match_indent = true


# Golden Carrot
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''local rarity = _rarity or SMODS.poll_rarity("Joker", 'rarity'..G.GAME.round_resets.ante..(_append or ''))'''
position = "after"
payload = '''
if G.jokers and next(SMODS.find_card("j_garb_goldcarrot")) and _type == 'Joker' then
    for i = 1, (3*#SMODS.find_card("j_garb_goldcarrot")) do
        if rarity < 3 then
            rarity = SMODS.poll_rarity("Joker", 'rarity'..G.GAME.round_resets.ante..(_append or ''))
        end
    end
end
'''
match_indent = true

# Backtrack
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
G.GAME.skips = (G.GAME.skips or 0) + 1
'''
position = "after"
payload = '''
if next(SMODS.find_card("j_garb_backtrack")) then
        G.E_MANAGER:add_event(Event({
          trigger = 'before', delay = 0.2,
          func = function()
            G.blind_prompt_box.alignment.offset.y = -10
            G.blind_select.alignment.offset.y = 40
            G.blind_select.alignment.offset.x = 0
            return true
        end}))
    G.E_MANAGER:add_event(Event({
        trigger = "immediate",
        func = function()
            G.GAME.current_round.jokers_purchased = 0
            G.STATE = G.STATES.SHOP
            G.STATE_COMPLETE = false

            G.GAME.shop_free = nil
            G.GAME.shop_d6ed = nil
            G.GAME.current_round.used_packs = {}

            G.blind_select:remove()
            G.blind_prompt_box:remove()
            G.blind_select = nil
            delay(0.2)    
            return true
            end,
        }))
end
'''
match_indent = true
times = 1

# Title Screen - Colors
[[patches]]
[patches.pattern]
target = "globals.lua"
pattern = '''
RENTAL = HEX('b18f43'),
'''
position = "after"
payload = '''
GARB_T1 = HEX("FF87DB"),
GARB_T2 = HEX("B670D8"),
'''
match_indent = true
times = 1

# Temp Hands - Defined
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "temp_handsize = nil,"
position = "after"
payload = '''
temp_hands = nil,
'''
match_indent = true

# Temp Hands
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.round_resets.temp_handsize then G.hand:change_size(-G.GAME.round_resets.temp_handsize); G.GAME.round_resets.temp_handsize = nil end"
position = "after"
payload = '''
if G.GAME.round_resets.temp_hands then G.GAME.round_resets.hands = G.GAME.round_resets.hands - G.GAME.round_resets.temp_hands; G.GAME.round_resets.temp_hands = nil end
'''
match_indent = true

# Temp Discards
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.round_resets.temp_handsize then G.hand:change_size(-G.GAME.round_resets.temp_handsize); G.GAME.round_resets.temp_handsize = nil end"
position = "after"
payload = '''
if G.GAME.round_resets.temp_discards then G.GAME.round_resets.discards = G.GAME.round_resets.discards - G.GAME.round_resets.temp_discards; G.GAME.round_resets.temp_discards = nil end
'''
match_indent = true

# Tangerine Deck - Probabilities
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "_pool[#_pool + 1] = v.key"
position = "before"
payload = '''
if G.GAME.selected_back and G.GAME.selected_back.effect.center.key == "b_garb_garbdeck" or 
    (G.GAME.selected_sleeve and G.GAME.selected_sleeve == "sleeve_garb_tangerine") then
    if string.sub(v.key, 1, 6) == 'j_garb' then
        for i=1, 2 do
            _pool[#_pool + 1] = v.key
            _pool_size = _pool_size + 1
        end
    end
end

if G.GAME.selected_back and G.GAME.selected_back.effect.center.key == "b_garb_garbdeck" and 
    (G.GAME.selected_sleeve and G.GAME.selected_sleeve == "sleeve_garb_tangerine") then
    if string.sub(v.key, 1, 6) == 'j_garb' then
        for i=1, 32 do
            _pool[#_pool + 1] = v.key
            _pool_size = _pool_size + 1
        end
    end
end
'''
match_indent = true

# Colorful Joker - Unlock
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:add_to_deck(from_debuff)"
position = "after"
payload = '''
    local suit_jokers = {"j_greedy_joker", "j_lusty_joker", "j_wrathful_joker", "j_gluttenous_joker"}
    local have_jokers = {}
    for i = 1, #suit_jokers do
        if self.config.center.key == suit_jokers[i] then
            for m = 1, #suit_jokers do
                if m ~= i then
                    if next(SMODS.find_card(suit_jokers[m])) then have_jokers[m] = suit_jokers[i] else have_jokers = {} end
                end  
            end
        end
        if #have_jokers == 3 then
            check_for_unlock({ type = "colorful_jonk" })
        end
    end
    '''
match_indent = false
overwrite = false

# Two of Cups - Unlock
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:add_to_deck(from_debuff)"
position = "after"
payload = '''
    local vteller_jokers = {"j_fortune_teller", "j_vagabond"}
    local v_have_jokers = {}
    for i = 1, #vteller_jokers do
        if self.config.center.key == vteller_jokers[i] then
            for m = 1, #vteller_jokers do
                if m ~= i then
                    if next(SMODS.find_card(vteller_jokers[m])) then v_have_jokers[m] = vteller_jokers[i] else v_have_jokers = {} end
                end  
            end
        end
        if #v_have_jokers == 1 then
            check_for_unlock({ type = "vteller" })
        end
    end
    '''
match_indent = false
overwrite = false


# Black Hole - Unlock
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Black Hole' then"
position = "after"
payload = '''check_for_unlock({ type = "black_hole" })'''
match_indent = true
overwrite = false

# Quadrant Hands - Telescope
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if _hand then"
position = "before"
payload = '''
local quadrant_hands = {"garb_blush", "garb_caliginous", "garb_ashen", "garb_pale"}
for i = 1, #quadrant_hands do
    if _hand == quadrant_hands[i] then _hand = "Flush" end
end
'''
match_indent = true
overwrite = false

# Quadrant Hands - Blue Seal
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card(card_type,G.consumeables, nil, nil, nil, nil, _planet, 'blusl')"
position = "before"
payload = '''
local quadrant_hands = {"garb_blush", "garb_caliginous", "garb_ashen", "garb_pale"}
for i = 1, #quadrant_hands do
    if G.GAME.last_hand_played == quadrant_hands[i] then _planet = "c_jupiter" end
end
'''
match_indent = true
overwrite = false

# Angel of Salt - Unlock
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "for i = 1, self.ability.extra.destroy do destroyed_cards[#destroyed_cards+1] = temp_hand[i] end"
position = "after"
payload = '''
            local stones = {}
            for i = 1, #destroyed_cards do if destroyed_cards[i].ability.name == 'Stone Card' then stones[#stones+1] = destroyed_cards[i] end end
            if #stones == 5 then check_for_unlock({ type = "salt" }) end
'''
match_indent = true
overwrite = false

# Title Screen - Cryptid Compatibility
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "local replace_card = Card(self.title_top.T.x, self.title_top.T.y, 1.2*G.CARD_W*SC_scale, 1.2*G.CARD_H*SC_scale, G.P_CARDS.S_A, G.P_CENTERS.c_base)"
position = "at"
payload = '''
if next(SMODS.find_mod("Cryptid")) then
    replace_card = Card(self.title_top.T.x, self.title_top.T.y, 1.2*G.CARD_W*SC_scale, 1.2*G.CARD_H*SC_scale, G.P_CARDS.S_A, G.P_CENTERS.c_base)
elseif config.title then
	replace_card = SMODS.create_card({
		set = "Joker",
		area = G.title_top,
		key = "j_garb_ratboyTITLE",
		no_edition = true
	})
    replace_card.T.scale = 1.32
else 
    replace_card = Card(self.title_top.T.x, self.title_top.T.y, 1.2*G.CARD_W*SC_scale, 1.2*G.CARD_H*SC_scale, G.P_CARDS.S_A, G.P_CENTERS.c_base)
end
'''
match_indent = true
overwrite = true

# Splash - THE SURGE
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])"

position = "at"
payload = '''
if config.title then
SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_garb_surgeTITLE'])
else
SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])
end
'''
match_indent = true
overwrite = true